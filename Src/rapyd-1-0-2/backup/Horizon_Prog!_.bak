(lp1
(dp2
S'ModulePrevious'
p3
S'MA_41_Prog'
p4
sS'ModuleCurrent'
p5
S'Horizon_Prog'
p6
sS'Version'
p7
I1
sS'Geometry'
p8
S'1914x1008+-8+0'
p9
sS'ProjectName'
p10
g6
sS'ImportTypes'
p11
(lp12
(S'Pmw'
p13
S'import'
p14
tp15
a(S'Tkinter'
p16
S'from'
p17
tp18
asS'EditorWidths'
p19
((lp20
I132
aI132
a(lp21
I132
aI132
a(lp22
I130
aI130
atp23
sS'ID'
p24
S'Rapyd Project'
p25
sS'ParkingLot'
p26
(dp27
S'SelectedWidreq'
p28
NsS'Widreqs'
p29
(lp30
ssa(dp31
S'PreviousForm'
p32
S'-Main-'
p33
sS'OnTab'
p34
I1
sg33
(dp35
S'Cursor'
p36
S'8.13'
p37
sS'Text'
p38
(lp39
S''
aS'#!/usr/bin/python\n#coding=utf8\n\n'
p40
aS'import rpErrorHandler\nfrom Tkinter import *\n'
p41
aV\u000aconnected=0\u000aCOMtimeout=30\u000adefaultCOMportindex=5\u000astop_reading_COM=0\u000atrim=7\u000a\u000adef read_string_from_serial():\u000a    char = '*'\u000a    string=""\u000a    while (char<>'') and (char <> '\u005cr'):\u000a        char=ser.read()\u000a        string=string+char\u000a        if char=='\u005cr':\u000a            string=string+'\u005cn'     \u000a        if (char=='') and (string<>""):         \u000a            string=string+'\u005cn'\u000a    return string\u000a\u000adef read_and_print(disable_stop):\u000a    string=''\u000a    if stop_reading_COM==1 and disable_stop==0: return ''\u000a    global connected\u000a    if connected==1: \u000a        string=read_string_from_serial()\u000a        if string<>"":\u000a            App._ReceivedText.insert('1.0', string)  \u000a    return string\u000a            \u000adef verify(string,value,type):\u000a    if type=='ataddr':\u000a        if string.upper().find(("0X"+str(hex(numh()*256+numl()))[2:].zfill(4)).upper())==-1: return 0\u000a    if type=='ipaddr':\u000a        if string.find(value)==-1: return 0\u000a    if type=='macaddr':\u000a        if string.find(value[:12]+str(hex(numh())[2:]).upper().zfill(2)+':'+str(hex(numl())[2:]).upper().zfill(2))==-1: return 0\u000a        \u000a    return 1\u000a        \u000a\u000a\u000adef write_and_verify(param,value,type):\u000a    if value=='': return 1 #1-ok, 0-not ok\u000a    global stop_reading_COM\u000a    stop_reading_COM=1        \u000a\u000a    write_eep(param+' '+value)\u000a    string=write_eep(param)      \u000a\u000a    if verify(string,value,type)==0:\u000a        stop_reading_COM=0\u000a        return 0\u000a        \u000a    stop_reading_COM=0\u000a    return 1\u000a    \u000a    \u000adef loopproc():             \u000a     read_and_print(0)\u000a     setup_ip_mac_etc() \u000a     Root.after(COMtimeout,loopproc) \u000a\u000adef write_ram(string):\u000a    read_and_print(1)\u000a    ser.write(string+'\u005cr') \u000a    read_and_print(1)\u000a    return read_and_print(1)\u000a    \u000adef write_eep(string):\u000a    read_and_print(1)\u000a    ser.write('eeprom '+string+'\u005cr')\u000a    read_and_print(1)\u000a    return read_and_print(1)\u000a    \u000adef write_ram_eep(string):      \u000a    write_eep(string)\u000a    write_ram(string)\u000a    \u000a    \u000adef numh():\u000a    return int(math.floor(int(App.serial_number.get())/1000))\u000a   \u000adef numl():\u000a    return int(int(App.serial_number.get()) % 1000)\u000a\u000adef setup_ip_mac_etc():  \u000a\u000a    if App.serial_number.get()=='':return\u000a\u000a    try:\u000a        int(App.serial_number.get())\u000a    except:\u000a        App.serial_number.set('')\u000a        mbox.showerror('\u041e\u0448\u0438\u0431\u043a\u0430','\u041d\u0435\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b!')\u000a        return\u000a        \u000a        \u000a\u000a    if App.device.get()=='ma41' or App.device.get()=='ma45':    \u000a        App.ataddr.set(hex(numh()*256+numl()))\u000a        App.phyipaddr.set('10.2.'+str(numh())+'.'+str(numl()))\u000a        App.ethipaddr.set('')\u000a        App.phymacaddr.set('00:11:D8:13:'+hex(numh())[2:]+':'+hex(numl())[2:])\u000a        App.ethmacaddr.set('')        \u000a\u000a    if App.device.get()=='lsr4':\u000a        App.ataddr.set(hex(numh()*256+numl()))\u000a        App.phyipaddr.set('10.1.'+str(numh())+'.'+str(numl()))\u000a        App.ethipaddr.set('')\u000a        App.phymacaddr.set('00:11:D8:13:'+hex(numh())[2:]+':'+hex(numl())[2:])\u000a        App.ethmacaddr.set('')        \u000a\u000a    if App.device.get()=='lse4':\u000a        App.ataddr.set(hex(numh()*256+numl()))\u000a        App.phyipaddr.set('10.2.'+str(numh())+'.'+str(numl()))\u000a        App.ethipaddr.set('10.0.'+str(numh())+'.'+str(numl()))\u000a        App.phymacaddr.set('00:11:D8:13:'+hex(numh())[2:]+':'+hex(numl())[2:])\u000a        App.ethmacaddr.set('00:11:D8:13:'+hex(numh())[2:]+':'+hex(numl())[2:]) \u000a\u000a    if App.device.get()=='1m500':            \u000a        App.ataddr.set(hex(numh()*256+numl()))\u000a        App.phyipaddr.set('10.1.'+str(numh())+'.'+str(numl()))\u000a        App.ethipaddr.set('10.0.'+str(numh())+'.'+str(numl()))\u000a        App.phymacaddr.set('00:11:D8:13:'+hex(numh())[2:]+':'+hex(numl())[2:])\u000a        App.ethmacaddr.set('00:11:D8:13:'+hex(numh())[2:]+':'+hex(numl())[2:])          \u000a        \u000a\u000atry:\u000a    #--------------------------------------------------------------------------#\u000a    # User code should go after this comment so it is inside the "try".        #\u000a    #     This allows rpErrorHandler to gain control on an error so it         #\u000a    #     can properly display a Rapyd-aware error message.                    #\u000a    #--------------------------------------------------------------------------#\u000a\u000a    #Adjust sys.path so we can find other modules of this project\u000a   \u000a   \u000a\u000a    \u000a    \u000a    \u000a    if '.' not in sys.path:\u000a        sys.path.append('.')\u000a    #Put lines to import other modules of this project here\u000a \u000a    import sys\u000a    \u000a    import serial\u000a    import msvcrt\u000a    import time\u000a    import math\u000a    import tkMessageBox as mbox\u000a \u000a \u000a    \u000a    if __name__ == '__main__':\u000a
p42
aS"        Root = Tk()\n        import Tkinter\n        Tkinter.CallWrapper = rpErrorHandler.CallWrapper\n        del Tkinter\n        App = Horizon_Prog(Root)\n        App.pack(expand='yes',fill='both')\n"
p43
aS"        Root.geometry('1000x640+10+10')\n        Root.title('Horizon programming')\n        \n\n        \n        Root.after(COMtimeout,loopproc)\n        \n        def left_key(event): \n           if App.ArrowKeysOn.get()==1:\n               if connected==1:\n                   App._on__left_command()\n            \n        def right_key(event):\n           if App.ArrowKeysOn.get()==1:\n                if connected==1:\n                   App._on__right_command()            \n\n        def up_key(event):\n                if connected==1:\n                   App._on__prog_and_increment_command()                \n        \n        Root.bind('<Left>', left_key)\n        Root.bind('<Right>', right_key)\n        Root.bind('<Up>', up_key)\n\n        \n        Root.mainloop()\n    #--------------------------------------------------------------------------#\n    # User code should go above this comment.                                  #\n    #--------------------------------------------------------------------------#\nexcept:\n    rpErrorHandler.RunError()"
p44
asg7
I0
sS'Sha'
p45
I10165631
ssS'Forms'
p46
(lp47
(dp48
S'Requested'
p49
S'Gui'
p50
sS'Name'
p51
S'Horizon_Prog'
p52
sg28
S'_Label12'
p53
sS'Type'
p54
S'Tkinter.Frame'
p55
sS'Lines'
p56
(lp57
(lp58
I9854
aI4994
aI1
aa(lp59
I2520
aI4994
aI1
aa(lp60
I1260
aI7884
aI0
aa(lp61
I1260
aI7255
aI0
aa(lp62
I1260
aI6941
aI0
aa(lp63
I475
aI7570
aI1
aa(lp64
I1284
aI7570
aI1
aa(lp65
I2051
aI8936
aI1
aa(lp66
I6184
aI5502
aI0
aa(lp67
I6184
aI6505
aI0
aa(lp68
I6184
aI8102
aI0
aa(lp69
I6184
aI8561
aI0
aa(lp70
I6184
aI9069
aI0
aa(lp71
I6184
aI6892
aI0
aa(lp72
I6184
aI7388
aI0
aasg38
(dp73
g36
S'290.42'
p74
sg38
(lp75
S'#------------------------------------------------------------------------------#\n#                                                                              #\n#                                 Horizon_Prog                                 #\n#                                                                              #\n#------------------------------------------------------------------------------#\nclass Horizon_Prog(Frame):\n    def __init__(self,Master=None,*pos,**kw):\n'
p76
aS'        #\n        #Your code here\n        #    \n'
p77
aV\u000a        apply(Frame.__init__,(self,Master),kw)\u000a        self.device = StringVar()\u000a        self.ArrowKeysOn = IntVar()\u000a        self.COM_port_index = StringVar()\u000a        self.ataddr = StringVar()\u000a        self.entry_at_addr = StringVar()\u000a        self.entry_at_addr_exe = StringVar()\u000a        self.entry_at_addr_rt = StringVar()\u000a        self.ethipaddr = StringVar()\u000a        self.ethmacaddr = StringVar()\u000a        self.ifbw = IntVar()\u000a        self.entry_ipaddr = StringVar()\u000a        self.phyipaddr = StringVar()\u000a        self.phymacaddr = StringVar()\u000a        self.serial_number = StringVar()\u000a        self.text_to_send = StringVar()\u000a        self._Frame2 = Frame(self)\u000a        self._Frame2.pack(fill='y',side='left')\u000a        self._Frame4 = Frame(self,background='#dbdbdb')\u000a        self._Frame4.pack(fill='y',side='left')\u000a        self._Frame3 = Frame(self)\u000a        self._Frame3.pack(side='left')\u000a        self._Frame6 = Frame(self._Frame2)\u000a        self._Frame6.pack(side='top')\u000a        self._Label1 = Label(self._Frame6\u000a            ,text='\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u043e\u043c\u0435\u0440 COM-\u043f\u043e\u0440\u0442\u0430 (\u0441\u043c. \u0434\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432):')\u000a        self._Label1.pack(side='top')\u000a        self._COM_port_index = Entry(self._Frame6\u000a            ,textvariable=self.COM_port_index)\u000a        self._COM_port_index.pack(side='top')\u000a        self._COM_port_connect = Button(self._Frame6\u000a            ,command=self._on__COM_port_connect_command,text='\u041e\u0442\u043a\u0440\u044b\u0442\u044c COM-\u043f\u043e\u0440\u0442')\u000a        self._COM_port_connect.pack(side='top')\u000a        self._Label3 = Label(self._Frame6,justify='left'\u000a            ,text='\u0412\u044b\u0431\u0435\u0440\u0435\u0442\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e:')\u000a        self._Label3.pack(side='top')\u000a        self._MA41 = Radiobutton(self._Frame6,command=self._set_serial\u000a            ,justify='left',text='\u041c\u043e\u0434\u0443\u043b\u044c \u041c\u0410-41',value='ma41'\u000a            ,variable=self.device)\u000a        self._MA41.pack(side='top')\u000a        self._MA45 = Radiobutton(self._Frame6,command=self._set_serial\u000a            ,justify='left',text='\u041c\u043e\u0434\u0443\u043b\u044c \u041c\u0410-45',value='ma45'\u000a            ,variable=self.device)\u000a        self._MA45.pack(side='top')\u000a        self._LSR4 = Radiobutton(self._Frame6,command=self._set_serial\u000a            ,justify='left',text='\u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u0435\u043b\u044c \u041b\u0421-\u04204',value='lsr4'\u000a            ,variable=self.device)\u000a        self._LSR4.pack(side='top')\u000a        self._LSE4 = Radiobutton(self._Frame6,command=self._set_serial\u000a            ,justify='left',text='\u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u0435\u043b\u044c \u041b\u0421-\u04154',value='lse4'\u000a            ,variable=self.device)\u000a        self._LSE4.pack(side='top')\u000a        self._1M500 = Radiobutton(self._Frame6,command=self._set_serial\u000a            ,justify='left',text='\u041a\u0430\u0441\u0441\u0435\u0442\u0430 1-M-500',value='1m500'\u000a            ,variable=self.device)\u000a        self._1M500.pack(side='top')\u000a        self._Label2 = Label(self._Frame6,text='\u0421\u0435\u0440\u0438\u0439\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440:')\u000a        self._Label2.pack(side='top')\u000a        self._serialnumber = Entry(self._Frame6,textvariable=self.serial_number)\u000a        self._serialnumber.pack(side='top')\u000a        self._prog_and_increment = Button(self._Frame6\u000a            ,command=self._on__prog_and_increment_command,state='disabled'\u000a            ,text='Write to EEPROM ataddr, ipaddr, macaddr, ifbw and increment serial number (up key)')\u000a        self._prog_and_increment.pack(side='top')\u000a        self._Label9 = Label(self._Frame6,text='at addr')\u000a        self._Label9.pack(side='top')\u000a        self._ataddr = Entry(self._Frame6,state='disabled'\u000a            ,textvariable=self.ataddr)\u000a        self._ataddr.pack(side='top')\u000a        self._Label5 = Label(self._Frame6,text='phy ipaddr:')\u000a        self._Label5.pack(side='top')\u000a        self._phyipaddr = Entry(self._Frame6,state='disabled'\u000a            ,textvariable=self.phyipaddr)\u000a        self._phyipaddr.pack(side='top')\u000a        self._Label6 = Label(self._Frame6,text='eth ipaddr:')\u000a        self._Label6.pack(side='top')\u000a        self._ethipaddr = Entry(self._Frame6,state='disabled'\u000a            ,textvariable=self.ethipaddr)\u000a        self._ethipaddr.pack(side='top')\u000a        self._ethmacaddr = Entry(self._Frame6,state='disabled'\u000a            ,textvariable=self.ethmacaddr)\u000a        self._ethmacaddr.pack(side='bottom')\u000a        self._Label8 = Label(self._Frame6,text='eth macaddr:')\u000a        self._Label8.pack(side='bottom')\u000a        self._phymacaddr = Entry(self._Frame6,state='disabled'\u000a            ,textvariable=self.phymacaddr)\u000a        self._phymacaddr.pack(side='bottom')\u000a        self._Label7 = Label(self._Frame6,text='phy macaddr:')\u000a        self._Label7.pack(side='bottom')\u000a        self._Frame1 = Frame(self._Frame2)\u000a        self._Frame1.pack(side='top')\u000a        self._Label10 = Label(self._Frame1,text='at frequency trim:')\u000a        self._Label10.pack(side='top')\u000a        self._Frame10 = Frame(self._Frame2)\u000a        self._Frame10.pack(side='top')\u000a        self._Frame7 = Frame(self._Frame2)\u000a        self._Frame7.pack(side='top')\u000a        self._Frame14 = Frame(self._Frame4)\u000a        self._Frame14.pack(side='top')\u000a        self._ReceivedText = Text(self._Frame14)\u000a        self._ReceivedText.pack(side='bottom')\u000a        self._label_Rcvd_Text = Label(self._Frame14\u000a            ,text='\u041f\u0440\u0438\u043d\u044f\u0442\u043e \u043e\u0442 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430:')\u000a        self._label_Rcvd_Text.pack(side='bottom')\u000a        self._send = Button(self._Frame14,command=self._on__send_command\u000a            ,state='disabled',text='\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0443')\u000a        self._send.pack(side='bottom')\u000a        self._text_to_send = Entry(self._Frame14,textvariable=self.text_to_send)\u000a        self._text_to_send.pack(side='bottom')\u000a        self._Label4 = Label(self._Frame14,text='\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438:')\u000a        self._Label4.pack(side='bottom')\u000a        self._Frame9 = Frame(self._Frame4)\u000a        self._Frame9.pack(fill='x',side='top')\u000a        self._btn_ping = Button(self._Frame9,command=self._on__btn_ping_command\u000a            ,state='disabled',text='ping')\u000a        self._btn_ping.pack(side='left')\u000a        self._ipaddr = Entry(self._Frame9,textvariable=self.entry_ipaddr)\u000a        self._ipaddr.pack(side='left')\u000a        self._Frame15 = Frame(self._Frame4)\u000a        self._Frame15.pack(fill='x',side='top')\u000a        self._btn_phyipaddr = Button(self._Frame15\u000a            ,command=self._on__btn_phyipaddr_command,state='disabled'\u000a            ,text='phy ipaddr')\u000a        self._btn_phyipaddr.pack(anchor='w',side='left')\u000a        self._btn_ataddr = Button(self._Frame15\u000a            ,command=self._on__btn_ataddr_command,state='disabled'\u000a            ,text='at addr')\u000a        self._btn_ataddr.pack(side='left')\u000a        self._Frame18 = Frame(self._Frame4)\u000a        self._Frame18.pack(fill='x',side='top')\u000a        self._btn_adf_tst = Button(self._Frame18\u000a            ,command=self._on__btn_adf_tst_command,state='disabled'\u000a            ,text='adf tst')\u000a        self._btn_adf_tst.pack(anchor='w',side='left')\u000a        self._btn_adf_tst_50 = Button(self._Frame18\u000a            ,command=self._on__btn_adf_tst_50_command,state='disabled'\u000a            ,text='adf tst 50')\u000a        self._btn_adf_tst_50.pack(anchor='w',side='left')\u000a        self._Frame19 = Frame(self._Frame4)\u000a        self._Frame19.pack(fill='x',side='top')\u000a        self._btn_dbg0 = Button(self._Frame19,command=self._on__btn_dbg0_command\u000a            ,state='disabled',text='dbg 0')\u000a        self._btn_dbg0.pack(anchor='w',side='left')\u000a        self._btn_dbg1 = Button(self._Frame19,command=self._on__btn_dbg1_command\u000a            ,state='disabled',text='dbg 1')\u000a        self._btn_dbg1.pack(anchor='w',side='left')\u000a        self._Frame16 = Frame(self._Frame4)\u000a        self._Frame16.pack(fill='x',side='top')\u000a        self._btn_at_dst_rt = Button(self._Frame16\u000a            ,command=self._on__btn_at_dst_rt_command,state='disabled'\u000a            ,text='at dst 0xXXXX + rt')\u000a        self._btn_at_dst_rt.pack(anchor='w',side='left')\u000a        self._entry_at_addr = Entry(self._Frame16\u000a            ,textvariable=self.entry_at_addr)\u000a        self._entry_at_addr.pack(side='left')\u000a        self._Frame17 = Frame(self._Frame4)\u000a        self._Frame17.pack(fill='x',side='top')\u000a        self._Label11 = Label(self._Frame17,text='\u041b\u0421-\u04204:')\u000a        self._Label11.pack(side='left')\u000a        self._entry_at_addr_exe = Entry(self._Frame17\u000a            ,textvariable=self.entry_at_addr_exe)\u000a        self._entry_at_addr_exe.pack(side='left')\u000a        self._btn_exe_at_dst_rt = Button(self._Frame17\u000a            ,command=self._on__btn_exe_at_dst_rt_command,state='disabled'\u000a            ,text='exe 0xXXXX at dst 0xXXXX + rt')\u000a        self._btn_exe_at_dst_rt.pack(side='left')\u000a        self._Label12 = Label(self._Frame17)\u000a        self._Label12.pack(side='left')\u000a        self._entry_at_addr_rt = Entry(self._Frame17\u000a            ,textvariable=self.entry_at_addr_rt)\u000a        self._entry_at_addr_rt.pack(side='left')\u000a        self._Frame20 = Frame(self._Frame4)\u000a        self._Frame20.pack(fill='x',side='top')\u000a        self._Frame5 = Frame(self._Frame10)\u000a        self._Frame5.pack(side='left')\u000a        self._left = Button(self._Frame5,command=self._on__left_command\u000a            ,state='disabled',text='<-------(left key)--at trim left')\u000a        self._left.pack(side='left')\u000a        self._Frame13 = Frame(self._Frame10)\u000a        self._Frame13.pack(side='left')\u000a        self._right = Button(self._Frame13,command=self._on__right_command\u000a            ,state='disabled',text='at trim right--(right key)------->')\u000a        self._right.pack(side='left')\u000a        self._Frame8 = Frame(self._Frame10)\u000a        self._Frame8.pack(side='left')\u000a        self._ArrowKeysOn = Checkbutton(self._Frame8\u000a            ,text='Arrow keys control on',variable=self.ArrowKeysOn)\u000a        self._ArrowKeysOn.pack(side='left')\u000a        self._Frame11 = Frame(self._Frame7)\u000a        self._Frame11.pack(side='left')\u000a        self._ifbw0 = Radiobutton(self._Frame11,text='ifbw 0 (\u0434\u043b\u044f ADF7021)'\u000a            ,value=0,variable=self.ifbw)\u000a        self._ifbw0.pack(side='top')\u000a        self._ifbw1 = Radiobutton(self._Frame11,text='ifbw 1 (\u0434\u043b\u044f ADF7021-N)'\u000a            ,value=1,variable=self.ifbw)\u000a        self._ifbw1.pack(side='top')\u000a        self._Frame12 = Frame(self._Frame7)\u000a        self._Frame12.pack(side='left')\u000a        self._set_ifbw = Button(self._Frame12,command=self._on__set_ifbw_command\u000a            ,state='disabled',text='Set IFBW')\u000a        self._set_ifbw.pack(side='top')\u000a
p78
aS'        #\n        #Your code here\n        #\n        \n\n            \n\n        \n        self.device.set(\'ma41\')\n        self.serial_number.set(\'16001\')\n        self.ifbw.set(0)\n        \n        self.COM_port_index.set(str(defaultCOMportindex))\n        self.text_to_send.set(str("sys info"))\n        self.entry_ipaddr.set(\'10.2.1.20\')\n        self.entry_at_addr.set(\'0x0001\')\n        self.entry_at_addr_exe.set(\'0x1001\')\n        self.entry_at_addr_rt.set(\'0x0077\')\n        \n'
p79
aS'    #\n    #Start of event handler methods\n    #\n'
p80
aS'\n'
aS'\n    def _on__COM_port_connect_command(self'
p81
aV,Event=None):\u000a        global connected\u000a        try:\u000a            global ser\u000a            ser = serial.Serial("COM"+self.COM_port_index.get(),timeout=0.02)\u000a            ser.baudrate = 115200\u000a            connected=1\u000a            self._COM_port_connect.config(state='disabled')\u000a            self._prog_and_increment.config(state="normal")\u000a            self._send.config(state="normal")\u000a            self._set_ifbw.config(state="normal")\u000a            self._prog_and_increment.config(state="normal")\u000a            self._left.config(state="normal")\u000a            self._right.config(state="normal")\u000a            self._btn_ping.config(state="normal")\u000a            self._btn_phyipaddr.config(state="normal")\u000a            self._btn_ataddr.config(state="normal")\u000a            self._btn_adf_tst.config(state="normal")            \u000a            self._btn_adf_tst_50.config(state="normal")            \u000a            self._btn_dbg0.config(state="normal")\u000a            self._btn_dbg1.config(state="normal")\u000a            self._btn_at_dst_rt.config(state="normal")\u000a            self._btn_exe_at_dst_rt.config(state="normal")\u000a            \u000a        except:            \u000a            connected=0\u000a            mbox.showerror("\u041e\u0448\u0438\u0431\u043a\u0430", "\u041d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044c COM-\u043f\u043e\u0440\u0442")  \u000a            \u000a        \u000a\u000a\u000a
p82
aS'\n    def _on__btn_adf_tst_50_command(self'
p83
aS",Event=None):\n        write_ram('adf tst 50')\n"
p84
aS'\n    def _on__btn_adf_tst_command(self'
p85
aS",Event=None):\n        write_ram('adf tst')\n"
p86
aS'\n    def _on__btn_at_dst_rt_command(self'
p87
aS",Event=None):\n        write_ram('at dst '+str(self.entry_at_addr.get()))\n        write_ram('rt')\n"
p88
aS'\n    def _on__btn_ataddr_command(self'
p89
aS",Event=None):\n        write_ram('at addr')\n"
p90
aS'\n    def _on__btn_dbg0_command(self'
p91
aS",Event=None):\n        write_ram('dbg 0')\n"
p92
aS'\n    def _on__btn_dbg1_command(self'
p93
aS",Event=None):\n        write_ram('dbg 1')\n"
p94
aS'\n    def _on__btn_exe_at_dst_rt_command(self'
p95
aS",Event=None):\n        write_ram('exe '+self.entry_at_addr_exe.get()+' at dst '+self.entry_at_addr_rt.get())\n        write_ram('exe '+self.entry_at_addr_exe.get()+' rt')\n"
p96
aS'\n    def _on__btn_phyipaddr_command(self'
p97
aS",Event=None):\n        write_ram('phy ipaddr')\n"
p98
aS'\n    def _on__btn_ping_command(self'
p99
aS",Event=None):\n        write_ram('ping '+str(self.entry_ipaddr.get()))\n"
p100
aS'\n    def _on__left_command(self'
p101
aS',Event=None):\n        global trim\n        if trim <15:\n            trim+=1\n            read_and_print(1)\n            write_ram_eep("at trim "+str(trim)+\'\\r\')\n            read_and_print(1)\n            read_and_print(1)\n'
p102
aS'\n    def _on__prog_and_increment_command(self'
p103
aV,Event=None):\u000a        setup_ip_mac_etc()\u000a        ok=1\u000a\u000a        if write_and_verify('at addr',self.ataddr.get(),'ataddr')==0:            \u000a           ok=0\u000a           mbox.showerror("\u041e\u0448\u0438\u0431\u043a\u0430","\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 at addr")\u000a\u000a        if write_and_verify('phy ipaddr',self.phyipaddr.get(),'ipaddr')==0:            \u000a           ok=0\u000a           mbox.showerror("\u041e\u0448\u0438\u0431\u043a\u0430","\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 phy ipaddr")\u000a           \u000a        if write_and_verify('eth ipaddr',self.ethipaddr.get(),'ipaddr')==0:            \u000a           ok=0\u000a           mbox.showerror("\u041e\u0448\u0438\u0431\u043a\u0430","\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 eth ipaddr")   \u000a           \u000a        if write_and_verify('phy macaddr',self.phymacaddr.get(),'macaddr')==0:            \u000a           ok=0\u000a           mbox.showerror("\u041e\u0448\u0438\u0431\u043a\u0430","\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 phy macaddr")                 \u000a           \u000a        if write_and_verify('eth macaddr',self.ethmacaddr.get(),'macaddr')==0:            \u000a           ok=0\u000a           mbox.showerror("\u041e\u0448\u0438\u0431\u043a\u0430","\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 eth macaddr")\u000a           \u000a        self._on__set_ifbw_command()\u000a           \u000a        \u000a        if ok==1:\u000a             self.serial_number.set(str(int(self.serial_number.get())+1))\u000a        \u000a        \u000a        \u000a
p104
aS'\n    def _on__right_command(self'
p105
aS',Event=None):\n        global trim\n        if trim >0:\n            trim-=1\n            read_and_print(1)\n            write_ram_eep("at trim "+str(trim)+\'\\r\')\n            read_and_print(1)\n'
p106
aS'\n    def _on__send_command(self'
p107
aS",Event=None):\n        ser.write(self._text_to_send.get()+'\\r')\n        \n\n"
p108
aS'\n    def _on__set_ifbw_command(self'
p109
aS",Event=None):        \n        write_ram_eep('adf ifbw '+str(self.ifbw.get()))\n        \n\n"
p110
aS'\n    def _set_serial(self'
p111
aS",Event=None):\n        if self.device.get()=='ma41':\n            self.serial_number.set('16001')\n            \n        if self.device.get()=='ma45':\n            self.serial_number.set('16001')         \n\n        if self.device.get()=='lsr4':\n            self.serial_number.set('1008')\n\n        if self.device.get()=='lse4':\n            self.serial_number.set('1008')\n      \n        if self.device.get()=='1m500':\n            self.serial_number.set('1008')\n            \n        setup_ip_mac_etc()\n\n\n      \n"
p112
aS'    #\n    #Start of non-Rapyd user code\n    #\n'
p113
aS''
asg7
I0
sg45
I754815
ssg29
(lp114
(dp115
S'ModuleName'
p116
S'Tkinter'
p117
sg51
g52
sS'WidgetName'
p118
S'Frame'
p119
sS'PackOptions'
p120
(lp121
sg24
(I0
tp122
sS'XY'
p123
(I0
I0
tp124
sS'Bindings'
p125
(lp126
sS'Options'
p127
(lp128
sa(dp129
g116
S'Tkinter'
p130
sg51
S'_1M500'
p131
sg118
S'Radiobutton'
p132
sg120
(lp133
sg24
Nsg123
(lp134
I1850
aI2600
asg125
(lp135
sg127
(lp136
(dp137
g51
S'text'
p138
sS'Value'
p139
V\u041a\u0430\u0441\u0441\u0435\u0442\u0430 1-M-500
p140
sS'Extra'
p141
Nsa(dp142
g51
S'variable'
p143
sg139
S'device'
p144
sg141
S'is.as'
p145
sa(dp146
g51
S'value'
p147
sg139
S'1m500'
p148
sg141
Nsa(dp149
g51
S'command'
p150
sg139
S'_set_serial'
p151
sg141
I1
sa(dp152
g51
S'justify'
p153
sg139
S'left'
p154
sg141
Nsasa(dp155
g116
S'Tkinter'
p156
sg51
S'_ArrowKeysOn'
p157
sg118
S'Checkbutton'
p158
sg120
(lp159
sg24
Nsg123
(lp160
I1570
aI7545
asg125
(lp161
sg127
(lp162
(dp163
g51
S'text'
p164
sg139
S'Arrow keys control on'
p165
sg141
Nsa(dp166
g51
S'variable'
p167
sg139
S'ArrowKeysOn'
p168
sg141
S'sif.ai'
p169
sasa(dp170
g116
S'Tkinter'
p171
sg51
S'_COM_port_connect'
p172
sg118
S'Button'
p173
sg120
(lp174
sg24
Nsg123
(lp175
I1850
aI762
asg125
(lp176
sg127
(lp177
(dp178
g51
S'text'
p179
sg139
V\u041e\u0442\u043a\u0440\u044b\u0442\u044c COM-\u043f\u043e\u0440\u0442
p180
sg141
Nsa(dp181
g51
S'command'
p182
sg139
S'_on__COM_port_connect_command'
p183
sg141
I1
sasa(dp184
g116
g171
sg51
S'_COM_port_index'
p185
sg118
S'Entry'
p186
sg120
(lp187
sg24
Nsg123
(lp188
I1850
aI423
asg125
(lp189
sg127
(lp190
(dp191
g51
S'textvariable'
p192
sg139
S'COM_port_index'
p193
sg141
S's.as'
p194
sasa(dp195
g116
S'Tkinter'
p196
sg51
S'_Frame1'
p197
sg118
S'Frame'
p198
sg120
(lp199
sg24
(I0
I0
I1
tp200
sg123
g124
sg125
(lp201
sg127
(lp202
sa(dp203
g116
g196
sg51
S'_Frame10'
p204
sg118
g198
sg120
(lp205
sg24
(I0
I0
I2
tp206
sg123
g124
sg125
(lp207
sg127
(lp208
sa(dp209
g116
g196
sg51
S'_Frame11'
p210
sg118
g198
sg120
(lp211
sg24
(I0
I0
I3
I0
tp212
sg123
g124
sg125
(lp213
sg127
(lp214
sa(dp215
g116
g196
sg51
S'_Frame12'
p216
sg118
g198
sg120
(lp217
sg24
(I0
I0
I3
I1
tp218
sg123
g124
sg125
(lp219
sg127
(lp220
sa(dp221
g116
g196
sg51
S'_Frame13'
p222
sg118
g198
sg120
(lp223
sg24
(I0
I0
I2
I1
tp224
sg123
g124
sg125
(lp225
sg127
(lp226
sa(dp227
g116
S'Tkinter'
p228
sg51
S'_Frame14'
p229
sg118
S'Frame'
p230
sg120
(lp231
sg24
(I0
I1
I0
tp232
sg123
g124
sg125
(lp233
sg127
(lp234
sa(dp235
g116
g228
sg51
S'_Frame15'
p236
sg118
g230
sg120
(lp237
(dp238
g51
S'fill'
p239
sg139
S'x'
sasg24
(I0
I1
I2
tp240
sg123
g124
sg125
(lp241
sg127
(lp242
sa(dp243
g116
S'Tkinter'
p244
sg51
S'_Frame16'
p245
sg118
S'Frame'
p246
sg120
(lp247
(dp248
g51
g239
sg139
S'x'
sasg24
(I0
I1
I5
tp249
sg123
g124
sg125
(lp250
sg127
(lp251
sa(dp252
g116
g244
sg51
S'_Frame17'
p253
sg118
g246
sg120
(lp254
(dp255
g51
g239
sg139
S'x'
sasg24
(I0
I1
I6
tp256
sg123
g124
sg125
(lp257
sg127
(lp258
sa(dp259
g116
g244
sg51
S'_Frame18'
p260
sg118
g246
sg120
(lp261
(dp262
g51
g239
sg139
S'x'
sasg24
(I0
I1
I3
tp263
sg123
g124
sg125
(lp264
sg127
(lp265
sa(dp266
g116
g244
sg51
S'_Frame19'
p267
sg118
g246
sg120
(lp268
(dp269
g51
g239
sg139
S'x'
sasg24
(I0
I1
I4
tp270
sg123
g124
sg125
(lp271
sg127
(lp272
sa(dp273
g116
S'Tkinter'
p274
sg51
S'_Frame2'
p275
sg118
S'Frame'
p276
sg120
(lp277
(dp278
g51
g239
sg139
S'y'
sasg24
(I0
I0
tp279
sg123
g124
sg125
(lp280
sg127
(lp281
sa(dp282
g116
g244
sg51
S'_Frame20'
p283
sg118
g246
sg120
(lp284
(dp285
g51
g239
sg139
S'x'
sasg24
(I0
I1
I7
tp286
sg123
g124
sg125
(lp287
sg127
(lp288
sa(dp289
g116
S'Tkinter'
p290
sg51
S'_Frame3'
p291
sg118
S'Frame'
p292
sg120
(lp293
sg24
(I0
I2
tp294
sg123
g124
sg125
(lp295
sg127
(lp296
sa(dp297
g116
g290
sg51
S'_Frame4'
p298
sg118
g292
sg120
(lp299
(dp300
g51
g239
sg139
S'y'
sasg24
(I0
I1
tp301
sg123
g124
sg125
(lp302
sg127
(lp303
(dp304
g51
S'background'
p305
sg139
S'c:#dbdbdb'
p306
sg141
Nsasa(dp307
g116
g196
sg51
S'_Frame5'
p308
sg118
g198
sg120
(lp309
sg24
(I0
I0
I2
I0
tp310
sg123
g124
sg125
(lp311
sg127
(lp312
sa(dp313
g116
g196
sg51
S'_Frame6'
p314
sg118
g198
sg120
(lp315
sg24
(I0
I0
I0
tp316
sg123
g124
sg125
(lp317
sg127
(lp318
sa(dp319
g116
g196
sg51
S'_Frame7'
p320
sg118
g198
sg120
(lp321
sg24
(I0
I0
I3
tp322
sg123
g124
sg125
(lp323
sg127
(lp324
sa(dp325
g116
S'Tkinter'
p326
sg51
S'_Frame8'
p327
sg118
S'Frame'
p328
sg120
(lp329
sg24
(I0
I0
I2
I2
tp330
sg123
g124
sg125
(lp331
sg127
(lp332
sa(dp333
g116
g228
sg51
S'_Frame9'
p334
sg118
g230
sg120
(lp335
(dp336
g51
g239
sg139
S'x'
sasg24
(I0
I1
I1
tp337
sg123
g124
sg125
(lp338
sg127
(lp339
sa(dp340
g116
g130
sg51
S'_LSE4'
p341
sg118
g132
sg120
(lp342
sg24
Nsg123
(lp343
I1850
aI2346
asg125
(lp344
sg127
(lp345
(dp346
g51
g138
sg139
V\u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u0435\u043b\u044c \u041b\u0421-\u04154
p347
sg141
Nsa(dp348
g51
g143
sg139
S'device'
p349
sg141
S'is.as'
p350
sa(dp351
g51
g147
sg139
S'lse4'
p352
sg141
Nsa(dp353
g51
g150
sg139
g151
sg141
I1
sa(dp354
g51
g153
sg139
g154
sg141
Nsasa(dp355
g116
g130
sg51
S'_LSR4'
p356
sg118
g132
sg120
(lp357
sg24
Nsg123
(lp358
I1850
aI2019
asg125
(lp359
sg127
(lp360
(dp361
g51
g138
sg139
V\u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u0435\u043b\u044c \u041b\u0421-\u04204
p362
sg141
Nsa(dp363
g51
g143
sg139
S'device'
p364
sg141
S'is.as'
p365
sa(dp366
g51
g147
sg139
S'lsr4'
p367
sg141
Nsa(dp368
g51
g150
sg139
g151
sg141
I1
sa(dp369
g51
g153
sg139
g154
sg141
Nsasa(dp370
g116
g171
sg51
S'_Label1'
p371
sg118
S'Label'
p372
sg120
(lp373
sg24
Nsg123
(lp374
I1850
aI145
asg125
(lp375
sg127
(lp376
(dp377
g51
S'text'
p378
sg139
V\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u043e\u043c\u0435\u0440 COM-\u043f\u043e\u0440\u0442\u0430 (\u0441\u043c. \u0434\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432):
p379
sg141
Nsasa(dp380
g116
S'Tkinter'
p381
sg51
S'_Label10'
p382
sg118
S'Label'
p383
sg120
(lp384
sg24
Nsg123
(lp385
I1351
aI7050
asg125
(lp386
sg127
(lp387
(dp388
g51
g378
sg139
S'at frequency trim:'
p389
sg141
Nsasa(dp390
g116
S'Tkinter'
p391
sg51
S'_Label11'
p392
sg118
S'Label'
p393
sg120
(lp394
sg24
Nsg123
(lp395
I3500
aI8767
asg125
(lp396
sg127
(lp397
(dp398
g51
g378
sg139
V\u041b\u0421-\u04204:
p399
sg141
Nsasa(dp400
g116
g391
sg51
g53
sg118
g393
sg120
(lp401
sg24
Nsg123
(lp402
I4674
aI8815
asg125
(lp403
sg127
(lp404
sa(dp405
g116
S'Tkinter'
p406
sg51
S'_Label2'
p407
sg118
S'Label'
p408
sg120
(lp409
sg24
Nsg123
(lp410
I1850
aI2878
asg125
(lp411
sg127
(lp412
(dp413
g51
g378
sg139
V\u0421\u0435\u0440\u0438\u0439\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440:
p414
sg141
Nsasa(dp415
g116
S'Tkinter'
p416
sg51
S'_Label3'
p417
sg118
S'Label'
p418
sg120
(lp419
sg24
Nsg123
(lp420
I1850
aI1076
asg125
(lp421
sg127
(lp422
(dp423
g51
g378
sg139
V\u0412\u044b\u0431\u0435\u0440\u0435\u0442\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e:
p424
sg141
Nsa(dp425
g51
S'justify'
p426
sg139
g154
sg141
Nsasa(dp427
g116
g416
sg51
S'_Label4'
p428
sg118
g418
sg120
(lp429
sg24
Nsg123
(lp430
I6969
aI1536
asg125
(lp431
sg127
(lp432
(dp433
g51
g378
sg139
V\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438:
p434
sg141
Nsasa(dp435
g116
g416
sg51
S'_Label5'
p436
sg118
g418
sg120
(lp437
sg24
Nsg123
(lp438
I1850
aI4135
asg125
(lp439
sg127
(lp440
(dp441
g51
g378
sg139
S'phy ipaddr:'
p442
sg141
Nsasa(dp443
g116
g416
sg51
S'_Label6'
p444
sg118
g418
sg120
(lp445
sg24
Nsg123
(lp446
I1850
aI4897
asg125
(lp447
sg127
(lp448
(dp449
g51
g378
sg139
S'eth ipaddr:'
p450
sg141
Nsasa(dp451
g116
g416
sg51
S'_Label7'
p452
sg118
g418
sg120
(lp453
sg24
Nsg123
(lp454
I1850
aI5756
asg125
(lp455
sg127
(lp456
(dp457
g51
g378
sg139
S'phy macaddr:'
p458
sg141
Nsasa(dp459
g116
g416
sg51
S'_Label8'
p460
sg118
g418
sg120
(lp461
sg24
Nsg123
(lp462
I1856
aI6360
asg125
(lp463
sg127
(lp464
(dp465
g51
g378
sg139
S'eth macaddr:'
p466
sg141
Nsasa(dp467
g116
S'Tkinter'
p468
sg51
S'_Label9'
p469
sg118
S'Label'
p470
sg120
(lp471
sg24
Nsg123
(lp472
I1850
aI3640
asg125
(lp473
sg127
(lp474
(dp475
g51
g378
sg139
S'at addr'
p476
sg141
Nsasa(dp477
g116
g130
sg51
S'_MA41'
p478
sg118
g132
sg120
(lp479
sg24
Nsg123
(lp480
I1850
aI1378
asg125
(lp481
sg127
(lp482
(dp483
g51
g138
sg139
V\u041c\u043e\u0434\u0443\u043b\u044c \u041c\u0410-41
p484
sg141
Nsa(dp485
g51
g143
sg139
S'device'
p486
sg141
S'is.as'
p487
sa(dp488
g51
g147
sg139
S'ma41'
p489
sg141
Nsa(dp490
g51
g150
sg139
g151
sg141
I1
sa(dp491
g51
g153
sg139
g154
sg141
Nsasa(dp492
g116
g130
sg51
S'_MA45'
p493
sg118
g132
sg120
(lp494
sg24
Nsg123
(lp495
I1850
aI1705
asg125
(lp496
sg127
(lp497
(dp498
g51
g138
sg139
V\u041c\u043e\u0434\u0443\u043b\u044c \u041c\u0410-45
p499
sg141
Nsa(dp500
g51
g143
sg139
S'device'
p501
sg141
S'is.as'
p502
sa(dp503
g51
g147
sg139
S'ma45'
p504
sg141
Nsa(dp505
g51
g150
sg139
g151
sg141
I1
sa(dp506
g51
g153
sg139
g154
sg141
Nsasa(dp507
g116
g171
sg51
S'_ReceivedText'
p508
sg118
S'Text'
p509
sg120
(lp510
sg24
Nsg123
(lp511
I6969
aI4643
asg125
(lp512
sg127
(lp513
sa(dp514
g116
g468
sg51
S'_ataddr'
p515
sg118
S'Entry'
p516
sg120
(lp517
sg24
Nsg123
(lp518
I1850
aI3906
asg125
(lp519
sg127
(lp520
(dp521
g51
S'state'
p522
sg139
S'disabled'
p523
sg141
Nsa(dp524
g51
g192
sg139
S'ataddr'
p525
sg141
S's.as'
p526
sasa(dp527
g116
S'Tkinter'
p528
sg51
S'_btn_adf_tst'
p529
sg118
S'Button'
p530
sg120
(lp531
(dp532
g51
S'anchor'
p533
sg139
S'w'
sasg24
Nsg123
(lp534
I3737
aI7074
asg125
(lp535
sg127
(lp536
(dp537
g51
g179
sg139
S'adf tst'
p538
sg141
Nsa(dp539
g51
S'state'
p540
sg139
S'disabled'
p541
sg141
Nsa(dp542
g51
g182
sg139
S'_on__btn_adf_tst_command'
p543
sg141
I1
sasa(dp544
g116
g528
sg51
S'_btn_adf_tst_50'
p545
sg118
g530
sg120
(lp546
(dp547
g51
g533
sg139
S'w'
sasg24
Nsg123
(lp548
I4017
aI7098
asg125
(lp549
sg127
(lp550
(dp551
g51
g179
sg139
S'adf tst 50'
p552
sg141
Nsa(dp553
g51
g540
sg139
g541
sg141
Nsa(dp554
g51
g182
sg139
S'_on__btn_adf_tst_50_command'
p555
sg141
I1
sasa(dp556
g116
g528
sg51
S'_btn_at_dst_rt'
p557
sg118
g530
sg120
(lp558
(dp559
g51
g533
sg139
S'w'
sasg24
Nsg123
(lp560
I3506
aI8319
asg125
(lp561
sg127
(lp562
(dp563
g51
g179
sg139
S'at dst 0xXXXX + rt'
p564
sg141
Nsa(dp565
g51
g540
sg139
g541
sg141
Nsa(dp566
g51
g182
sg139
S'_on__btn_at_dst_rt_command'
p567
sg141
I1
sasa(dp568
g116
g391
sg51
S'_btn_ataddr'
p569
sg118
S'Button'
p570
sg120
(lp571
sg24
Nsg123
(lp572
I4297
aI6687
asg125
(lp573
sg127
(lp574
(dp575
g51
g179
sg139
S'at addr'
p576
sg141
Nsa(dp577
g51
g540
sg139
S'disabled'
p578
sg141
Nsa(dp579
g51
g182
sg139
S'_on__btn_ataddr_command'
p580
sg141
I1
sasa(dp581
g116
g528
sg51
S'_btn_dbg0'
p582
sg118
g530
sg120
(lp583
(dp584
g51
g533
sg139
S'w'
sasg24
Nsg123
(lp585
I3658
aI7703
asg125
(lp586
sg127
(lp587
(dp588
g51
g179
sg139
S'dbg 0'
p589
sg141
Nsa(dp590
g51
g540
sg139
g541
sg141
Nsa(dp591
g51
g182
sg139
S'_on__btn_dbg0_command'
p592
sg141
I1
sasa(dp593
g116
g528
sg51
S'_btn_dbg1'
p594
sg118
g530
sg120
(lp595
(dp596
g51
g533
sg139
S'w'
sasg24
Nsg123
(lp597
I4084
aI7763
asg125
(lp598
sg127
(lp599
(dp600
g51
g179
sg139
S'dbg 1'
p601
sg141
Nsa(dp602
g51
g540
sg139
g541
sg141
Nsa(dp603
g51
g182
sg139
S'_on__btn_dbg1_command'
p604
sg141
I1
sasa(dp605
g116
g528
sg51
S'_btn_exe_at_dst_rt'
p606
sg118
g530
sg120
(lp607
sg24
Nsg123
(lp608
I4358
aI8815
asg125
(lp609
sg127
(lp610
(dp611
g51
g179
sg139
S'exe 0xXXXX at dst 0xXXXX + rt'
p612
sg141
Nsa(dp613
g51
g540
sg139
g541
sg141
Nsa(dp614
g51
g182
sg139
S'_on__btn_exe_at_dst_rt_command'
p615
sg141
I1
sasa(dp616
g116
S'Tkinter'
p617
sg51
S'_btn_phyipaddr'
p618
sg118
S'Button'
p619
sg120
(lp620
(dp621
g51
g533
sg139
S'w'
sasg24
Nsg123
(lp622
I3974
aI6699
asg125
(lp623
sg127
(lp624
(dp625
g51
g179
sg139
S'phy ipaddr'
p626
sg141
Nsa(dp627
g51
g540
sg139
S'disabled'
p628
sg141
Nsa(dp629
g51
g182
sg139
S'_on__btn_phyipaddr_command'
p630
sg141
I1
sasa(dp631
g116
g617
sg51
S'_btn_ping'
p632
sg118
g619
sg120
(lp633
sg24
Nsg123
(lp634
I3956
aI6227
asg125
(lp635
sg127
(lp636
(dp637
g51
g179
sg139
S'ping'
p638
sg141
Nsa(dp639
g51
g540
sg139
g628
sg141
Nsa(dp640
g51
g182
sg139
S'_on__btn_ping_command'
p641
sg141
I1
sasa(dp642
g116
g528
sg51
S'_entry_at_addr'
p643
sg118
S'Entry'
p644
sg120
(lp645
sg24
Nsg123
(lp646
I4090
aI8259
asg125
(lp647
sg127
(lp648
(dp649
g51
g192
sg139
S'entry_at_addr'
p650
sg141
S's.as'
p651
sasa(dp652
g116
g528
sg51
S'_entry_at_addr_exe'
p653
sg118
g644
sg120
(lp654
sg24
Nsg123
(lp655
I3834
aI8779
asg125
(lp656
sg127
(lp657
(dp658
g51
g192
sg139
S'entry_at_addr_exe'
p659
sg141
S's.as'
p660
sasa(dp661
g116
g528
sg51
S'_entry_at_addr_rt'
p662
sg118
g644
sg120
(lp663
sg24
Nsg123
(lp664
I4960
aI8815
asg125
(lp665
sg127
(lp666
(dp667
g51
g192
sg139
S'entry_at_addr_rt'
p668
sg141
S's.as'
p669
sasa(dp670
g116
g416
sg51
S'_ethipaddr'
p671
sg118
S'Entry'
p672
sg120
(lp673
sg24
Nsg123
(lp674
I1850
aI5333
asg125
(lp675
sg127
(lp676
(dp677
g51
g522
sg139
g523
sg141
Nsa(dp678
g51
g192
sg139
S'ethipaddr'
p679
sg141
S's.as'
p680
sasa(dp681
g116
g416
sg51
S'_ethmacaddr'
p682
sg118
g672
sg120
(lp683
sg24
Nsg123
(lp684
I1850
aI6638
asg125
(lp685
sg127
(lp686
(dp687
g51
g522
sg139
g523
sg141
Nsa(dp688
g51
g192
sg139
S'ethmacaddr'
p689
sg141
S's.as'
p690
sasa(dp691
g116
S'Tkinter'
p692
sg51
S'_ifbw0'
p693
sg118
S'Radiobutton'
p694
sg120
(lp695
sg24
Nsg123
(lp696
I1327
aI7981
asg125
(lp697
sg127
(lp698
(dp699
g51
g138
sg139
Vifbw 0 (\u0434\u043b\u044f ADF7021)
p700
sg141
Nsa(dp701
g51
g143
sg139
S'ifbw'
p702
sg141
S'is.ai'
p703
sa(dp704
g51
g147
sg139
S'0'
sg141
Nsasa(dp705
g116
g692
sg51
S'_ifbw1'
p706
sg118
g694
sg120
(lp707
sg24
Nsg123
(lp708
I1327
aI8368
asg125
(lp709
sg127
(lp710
(dp711
g51
g138
sg139
Vifbw 1 (\u0434\u043b\u044f ADF7021-N)
p712
sg141
Nsa(dp713
g51
g143
sg139
S'ifbw'
p714
sg141
S'is.ai'
p715
sa(dp716
g51
g147
sg139
S'1'
sg141
Nsasa(dp717
g116
g617
sg51
S'_ipaddr'
p718
sg118
S'Entry'
p719
sg120
(lp720
sg24
Nsg123
(lp721
I4315
aI6227
asg125
(lp722
sg127
(lp723
(dp724
g51
g192
sg139
S'entry_ipaddr'
p725
sg141
S's.as'
p726
sasa(dp727
g116
g171
sg51
S'_label_Rcvd_Text'
p728
sg118
g372
sg120
(lp729
sg24
Nsg123
(lp730
I6969
aI3761
asg125
(lp731
sg127
(lp732
(dp733
g51
g378
sg139
V\u041f\u0440\u0438\u043d\u044f\u0442\u043e \u043e\u0442 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430:
p734
sg141
Nsasa(dp735
g116
g381
sg51
S'_left'
p736
sg118
S'Button'
p737
sg120
(lp738
sg24
Nsg123
(lp739
I219
aI7533
asg125
(lp740
sg127
(lp741
(dp742
g51
g179
sg139
S'<-------(left key)--at trim left'
p743
sg141
Nsa(dp744
g51
g540
sg139
S'disabled'
p745
sg141
Nsa(dp746
g51
g182
sg139
S'_on__left_command'
p747
sg141
I1
sasa(dp748
g116
g416
sg51
S'_phyipaddr'
p749
sg118
g672
sg120
(lp750
sg24
Nsg123
(lp751
I1850
aI4510
asg125
(lp752
sg127
(lp753
(dp754
g51
g522
sg139
g523
sg141
Nsa(dp755
g51
g192
sg139
S'phyipaddr'
p756
sg141
S's.as'
p757
sasa(dp758
g116
g416
sg51
S'_phymacaddr'
p759
sg118
g672
sg120
(lp760
sg24
Nsg123
(lp761
I1850
aI6143
asg125
(lp762
sg127
(lp763
(dp764
g51
g522
sg139
g523
sg141
Nsa(dp765
g51
g192
sg139
S'phymacaddr'
p766
sg141
S's.as'
p767
sasa(dp768
g116
g171
sg51
S'_prog_and_increment'
p769
sg118
g173
sg120
(lp770
sg24
Nsg123
(lp771
I1862
aI3349
asg125
(lp772
sg127
(lp773
(dp774
g51
g179
sg139
S'Write to EEPROM ataddr, ipaddr, macaddr, ifbw and increment serial number (up key)'
p775
sg141
Nsa(dp776
g51
g540
sg139
S'disabled'
p777
sg141
Nsa(dp778
g51
g182
sg139
S'_on__prog_and_increment_command'
p779
sg141
I1
sasa(dp780
g116
g381
sg51
S'_right'
p781
sg118
g737
sg120
(lp782
sg24
Nsg123
(lp783
I755
aI7582
asg125
(lp784
sg127
(lp785
(dp786
g51
g179
sg139
S'at trim right--(right key)------->'
p787
sg141
Nsa(dp788
g51
g540
sg139
g745
sg141
Nsa(dp789
g51
g182
sg139
S'_on__right_command'
p790
sg141
I1
sasa(dp791
g116
g171
sg51
S'_send'
p792
sg118
g173
sg120
(lp793
sg24
Nsg123
(lp794
I6932
aI2914
asg125
(lp795
sg127
(lp796
(dp797
g51
g179
sg139
V\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0443
p798
sg141
Nsa(dp799
g51
g540
sg139
S'disabled'
p800
sg141
Nsa(dp801
g51
g182
sg139
S'_on__send_command'
p802
sg141
I1
sasa(dp803
g116
g171
sg51
S'_serialnumber'
p804
sg118
g186
sg120
(lp805
sg24
Nsg123
(lp806
I1850
aI3132
asg125
(lp807
sg127
(lp808
(dp809
g51
g192
sg139
S'serial_number'
p810
sg141
S's.as'
p811
sasa(dp812
g116
S'Tkinter'
p813
sg51
S'_set_ifbw'
p814
sg118
S'Button'
p815
sg120
(lp816
sg24
Nsg123
(lp817
I2209
aI8295
asg125
(lp818
sg127
(lp819
(dp820
g51
g179
sg139
S'Set IFBW'
p821
sg141
Nsa(dp822
g51
g540
sg139
g523
sg141
Nsa(dp823
g51
g182
sg139
S'_on__set_ifbw_command'
p824
sg141
I1
sasa(dp825
g116
g171
sg51
S'_text_to_send'
p826
sg118
g186
sg120
(lp827
sg24
Nsg123
(lp828
I6969
aI2297
asg125
(lp829
sg127
(lp830
(dp831
g51
g192
sg139
S'text_to_send'
p832
sg141
S's.as'
p833
sasasS'BaseClass'
p834
g55
sg34
I1
sasS'VisibleForm'
p835
g52
sS'SelectedForm'
p836
g52
sg51
g6
sa.